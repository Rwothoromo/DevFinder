apply plugin: 'checkstyle'
apply plugin: 'pmd'

/*
 * Copyright 2015 Vincent Brison.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Add checkstyle, pmd and lint to the check task.
check.dependsOn 'checkstyle', 'pmd', 'lint'

def configDir = "${project.rootDir}/quality"
def reportsDir = "${project.buildDir}/reports"

tasks.register('checkstyle', Checkstyle) {
    configFile = file("$configDir/checkstyle/checkstyle.xml")
    source = 'src'
    include '**/*.java'
    exclude '**/gen/**',
            '**/androidTest/**',
            '**/test/**'
    classpath = files()
    ignoreFailures = false
}

tasks.register('pmd', Pmd) {
    ignoreFailures = false
    ruleSetFiles = files("$configDir/pmd/pmd-ruleset.xml")
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.required = true
        html.required = true

        xml.outputLocation = file("$reportsDir/pmd/pmd.xml")
        html.outputLocation = file("$reportsDir/pmd/pmd.html")
    }
}

android {
    lintOptions {
        abortOnError = true
        xmlReport = true
        htmlReport = true
        lintConfig = file("$configDir/lint/lint.xml")
        htmlOutput = file("$reportsDir/lint/lint-result.html")
        xmlOutput = file("$reportsDir/lint/lint-result.xml")
    }
}

tasks.register('detectInfer', Exec) {
    commandLine 'command'
    args = ['-v', 'infer']

    // Hide output if infer is present
    standardOutput new ByteArrayOutputStream()

    // Inform user if infer not present
    ignoreExitValue true
    doLast {
        if (execResult.getExitValue() != 0) {
            throw new GradleException("Infer seems not installed. Please refer to http://fbinfer.com/docs/getting-started.html")
        }
    }
}

tasks.register('infer', Exec) {
    check.dependsOn 'clean', 'detectInfer'
//    dependsOn[clean, detectInfer]
    workingDir "${project.rootDir}"
    commandLine 'infer'
    args = ['--', './gradlew', 'build']
}
