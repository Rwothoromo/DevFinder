version: 2.1

orbs:
  android: circleci/android@3.1.0
#  gcp-cli: circleci/gcp-cli@3.3.1

# Reusable commands / repeat tasks
commands:
  export_google_services_key:
    steps:
      - run:
          name: Export Google Services key environment variable
          command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV

  decode_google_services_key:
    steps:
      - run:
          name: Decode Google Services JSON key
          command: |
            sudo chmod 600 /root/.
            sudo mkdir -m 0755 -p app/src/mock/
            sudo mkdir -m 0755 -p app/src/prod/
            sudo touch -m 0755 app/google-services.json
            sudo touch -m 0755 app/src/mock/google-services.json
            sudo touch -m 0755 app/src/prod/google-services.json
            sudo chmod 777 app/google-services.json
            sudo chmod 777 app/src/mock/google-services.json
            sudo chmod 777 app/src/prod/google-services.json
            sudo echo $GOOGLE_SERVICES_JSON | base64 --decode > app/google-services.json
            sudo echo $GOOGLE_SERVICES_JSON | base64 --decode > app/src/mock/google-services.json
            sudo echo $GOOGLE_SERVICES_JSON | base64 --decode > app/src/prod/google-services.json
      - run: ls -l app/google-services.json

  export_keystore_key:
    steps:
      - run:
          name: Set the KEYSTORE environment variable to itâ€™s location.
          command: echo 'export KEYSTORE=~/project/keystores/keystore.jks' >> $BASH_ENV
      - run: ls -l ~/project/keystores/keystore.jks

  decode_keystore_key:
    steps:
      - run:
          name: Decode the base64 encoded text back into the keystore.jks file
          command: |
            sudo mkdir -m 0755 -p ~/project/keystores/
            sudo chmod 777 ~/project/keystores/
            echo $ENCODED_KEYSTORE | base64 --decode >> ~/project/keystores/keystore.jks
      - run: ls -l ~/project/keystores/keystore.jks

  save_gradle_cache:
    steps:
      - save_cache:
          paths:
            - ./settings.gradle
            - ./build.gradle
            - ./build.gradle.kts
            - ./app/build.gradle
          key: v1-gradle-{{ checksum "build.gradle" }}

  restore_gradle_cache:
    steps:
      - restore_cache:
          keys:
            - v1-gradle-{{ checksum "build.gradle" }}

  run_android_tests:
    steps:
      - android/start_emulator_and_run_tests:
          system_image: system-images;android-35;google_apis;x86_64
          # The command to be run, while waiting for emulator startup, can be overridden
          post_emulator_launch_assemble_command: ./gradlew assembleProdDebugAndroidTest
          # The test command can be overridden
          test_command: |
            # Disable animations
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0
            
            # Unlock emulator screen
            sleep 30
            adb shell input keyevent 82
            
            # Run Android Instrumented Tests
            ./gradlew connectedProdDebugAndroidTest -PdisablePreDex --stacktrace --warning-mode all
      - run:
          name: Android Instrumentation Test Locations
          command: |
            ls -l app/build/outputs/androidTest-results/connected/debug/flavors/prod/
            ls -l app/build/reports/androidTests/connected/debug/flavors/prod/
      - store_test_results:
          path: app/build/reports/androidTests/connected/debug/flavors/prod/
      - store_test_results:
          path: app/build/outputs/androidTest-results/connected/debug/flavors/prod/
      - store_artifacts:
          path: app/build/reports/androidTests/connected/debug/flavors/prod/
      - store_artifacts:
          path: app/build/outputs/androidTest-results/connected/debug/flavors/prod/

  run_unit_tests:
    steps:
      - android/run_tests:
          test_command: ./gradlew :app:testProdDebugUnitTest --warning-mode all | circleci tests glob "app/src/test/**/*Test.kt" | circleci tests run --command="echo" --verbose --split-by=timings --timings-type=classname
      - run:
          name: Unit Test Locations
          command: |
            ls -l app/build/test-results/testProdDebugUnitTest/
            ls -l app/build/reports/tests/testProdDebugUnitTest/
      - store_test_results:
          path: app/build/reports/tests/testProdDebugUnitTest/
      - store_test_results:
          path: app/build/test-results/testProdDebugUnitTest/
      - store_artifacts:
          path: app/build/reports/tests/testProdDebugUnitTest/
      - store_artifacts:
          path: app/build/test-results/testProdDebugUnitTest/

  jacoco_and_code_climate:
    steps:
      - run:
          name: Generate JaCoCo report
          command: |
            ./gradlew unifiedCoverageReport --stacktrace --warning-mode all
      - run:
          name: JaCoCo and Code Coverage File Locations
          command: |
            ls -l app/build/reports/jacocoTestReport/
            ls -l app/build/jacocoHtml/
            ls -l app/build/outputs/code_coverage/prodDebugAndroidTest/connected/
            ls -l app/build/outputs/unit_test_code_coverage/prodDebugUnitTest/
      - run:
          name: Code Climate Setup
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Upload coverage to code climate
          command: |
            export JACOCO_SOURCE_PATH=app/src/main/java
            # ./cc-test-reporter format-coverage app/build/outputs/code_coverage/prodDebugAndroidTest/connected/'test(AVD) - 15'/coverage.ec --input-type jacoco
            # ./cc-test-reporter format-coverage app/build/outputs/unit_test_code_coverage/prodDebugUnitTest/testProdDebugUnitTest.exec --input-type jacoco
            ./cc-test-reporter format-coverage app/build/reports/jacocoTestReport/jacocoTestReport.xml --input-type jacoco
            # ./cc-test-reporter sum-coverage
            ./cc-test-reporter upload-coverage
      - store_artifacts:
          path: app/build/reports/jacocoTestReport/

  release_build:
    steps:
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease --stacktrace --warning-mode all
      - run: ls -l app/
      - store_artifacts:
          path: app/build/outputs/apk/prod/release/app-prod-release.apk
      - save_gradle_cache


jobs:
  #  use-gcp:
  #    executor: gcp-cli/default
  #    steps:
  #      - gcp-cli/setup:
  #          version: 404.0.0

  build:
    executor:
      name: android/android_machine
      tag: default
    parallelism: 4
    environment:
      TERM: "dumb"
      ADB_INSTALL_TIMEOUT: "10"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError"'
      ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: 120
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: ls -l
      - run: pwd
      - export_google_services_key
      - decode_google_services_key
      - decode_keystore_key
      - export_keystore_key
      - restore_gradle_cache

      # Checkstyle, pmd and lint
      - run: ./gradlew dependencies --status --warning-mode all
      - run:
          name: Step 1 - Checkstyle, pmd and lint
          command: ./gradlew checkstyle pmd lint --warning-mode all
      - run: ls -l /home/circleci/project/app/build/reports/lint/
      - store_artifacts:
          path: /home/circleci/project/app/build/reports/lint/

      # Android Instrumentation tests
      - run:
          name: Step 2 - Android Instrumentation Tests Locations
          command: |
            sudo find . -print | grep -i 'app/src/androidTest/.*Test[.]kt'
      - run_android_tests

      # Unit Tests
      - run:
          name: Step 3 - Unit Tests Locations
          command: |
            sudo find . -print | grep -i 'app/src/test/.*Test[.]kt'
      - run_unit_tests

      # Code Climate and JaCoCo
      - run:
          name: Step 4 - Code Climate and JaCoCo
          command: ls -l app/build/reports/jacocoTestReport/
      - jacoco_and_code_climate

      # Release Build
      - run:
          name: Step 5 - Release builds (dir /apk/)
          command: ls -l app/build/outputs/
      - release_build


workflows:
  build_test_deploy:
    jobs:
      - build

#  install_and_configure_cli:
#    jobs:
#      - use-gcp:
#          context: myContext
