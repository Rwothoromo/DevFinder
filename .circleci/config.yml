version: 2.1

orbs:
  android: circleci/android@3.1.0
#  gcp-cli: circleci/gcp-cli@3.3.1

# Reusable commands / repeat tasks
commands:
  export_google_services_key:
    steps:
      - run:
          name: Export Google Services key environment variable
          command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV

  decode_google_services_key:
    steps:
      - run:
          name: Decode Google Services JSON key
          command: |
            sudo chmod 600 /root/.
            sudo mkdir -m 0755 -p app/src/mock/
            sudo mkdir -m 0755 -p app/src/prod/
            sudo touch -m 0755 app/google-services.json
            sudo touch -m 0755 app/src/mock/google-services.json
            sudo touch -m 0755 app/src/prod/google-services.json
            sudo chmod 777 app/google-services.json
            sudo chmod 777 app/src/mock/google-services.json
            sudo chmod 777 app/src/prod/google-services.json
            sudo echo $GOOGLE_SERVICES_JSON | base64 --decode > app/google-services.json
            sudo echo $GOOGLE_SERVICES_JSON | base64 --decode > app/src/mock/google-services.json
            sudo echo $GOOGLE_SERVICES_JSON | base64 --decode > app/src/prod/google-services.json
      - run: ls -l app/google-services.json

  export_keystore_key:
    steps:
      - run:
          name: Set the KEYSTORE environment variable to itâ€™s location.
          command: echo 'export KEYSTORE=~/project/keystores/keystore.jks' >> $BASH_ENV
      - run: ls -l ~/project/keystores/keystore.jks

  decode_keystore_key:
    steps:
      - run:
          name: Decode the base64 encoded text back into the keystore.jks file
          command: |
            sudo mkdir -m 0755 -p ~/project/keystores/
            sudo chmod 777 ~/project/keystores/
            echo $ENCODED_KEYSTORE | base64 --decode >> ~/project/keystores/keystore.jks
      - run: ls -l ~/project/keystores/keystore.jks

  save_gradle_cache:
    steps:
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-gradle-{{ checksum "build.gradle" }}

  restore_gradle_cache:
    steps:
      - restore_cache:
          keys:
            - v1-gradle-{{ checksum "build.gradle" }}


jobs:
  #  use-gcp:
  #    executor: gcp-cli/default
  #    steps:
  #      - gcp-cli/setup:
  #          version: 404.0.0

  quality_check:
    executor:
      name: android/android_machine
      resource_class: large
      tag: default
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: ls -l
      - export_google_services_key
      - decode_google_services_key
      - restore_gradle_cache
      - run: ./gradlew dependencies --warning-mode all
      - run: ./gradlew checkstyle pmd lint
      - save_gradle_cache


  unit_tests:
    executor:
      name: android/android_machine
      tag: default
    parallelism: 4
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: ls -l
      - export_google_services_key
      - decode_google_services_key
      - restore_gradle_cache
      - run: ./gradlew dependencies --warning-mode all
      - android/run_tests:
          test_command: ./gradlew testMockDebugUnitTest | circleci tests glob "app/src/test/**/*Test.kt" | circleci tests run --command="echo" --verbose --split-by=timings --timings-type=classname
      - run: ls -l && pwd
      - persist_to_workspace:
          root: ~/project
          paths:
            - app/build/intermediates
            - app/build/outputs/androidTest-results
            - app/build/outputs/apk
            - app/build/outputs/code-coverage
            - app/build/test-results
            - app/build/reports
            - app/build/reports/androidTests
            - app/build/reports/tests
            - firebase
      - run:
          name: Save test results
          command: |
            sudo mkdir -m 0755 -p ~/test-results/junit/
            sudo chmod 777 ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - run: ls -l ~/test-results/junit/
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - save_gradle_cache


  android_tests:
    environment:
      ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: 120 # seconds to wait before killing emu
    executor:
      name: android/android_machine
      tag: default
    parallelism: 4
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: ls -l
      - export_google_services_key
      - decode_google_services_key
      - restore_gradle_cache
      - run:
          name: Installing emulator and Running Instrumentation tests
          command: |
            sdkmanager "platform-tools" "platforms;android-35" "build-tools;30.0.0" "emulator"
            sdkmanager "system-images;android-34;google_apis;x86_64"
            sdkmanager --update
            sdkmanager "emulator" "platform-tools"
            echo no | avdmanager create avd -n test-emulator -k  "system-images;android-35;google_apis;x86_64"
            emulator -avd test-emulator -no-window -no-audio -no-boot-anim -accel on -gpu swiftshader_indirect &
            adb wait-for-device
            until adb shell getprop sys.boot_completed | grep 1; do sleep 3; done;
            adb shell wm dismiss-keyguard
            sleep 1
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0
            ./gradlew :app:connectedMockDebugAndroidTest --stacktrace --warning-mode all && killall -INT crashpad_handler
      - when:
          condition: false
          steps:
            - run:
                command: circleci-agent step halt
      - store_test_results:
          path: emulator.log # app/build/outputs/androidTest-results
      - store_artifacts:
          path: app/build/outputs/androidTest-results
      - save_gradle_cache


  jacoco_code_coverage:
    executor:
      name: android/android_machine
      tag: default
    steps:
      - checkout
      - export_google_services_key
      - decode_google_services_key
      - decode_keystore_key
      - export_keystore_key
      - restore_gradle_cache
      - run: ./gradlew dependencies --warning-mode all
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run: ls -l ~/project/firebase/
      - run:
          name: Move Firebase coverage report
          command: |
            sudo mkdir -m 0755 -p app/build/outputs/code-coverage/connected/flavors/MOCK
            sudo chmod 777 app/build/outputs/code-coverage/connected/flavors/MOCK
            cp firebase/sailfish-26-en_US-portrait/artifacts/coverage.ec app/build/outputs/code-coverage/connected/flavors/MOCK/coverage.ec
      - run:
          name: Code Climate Test Setup
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Code Climate Pretest
          command: ./cc-test-reporter before-build
      - run:
          name: Generate JaCoCo report
          command: ./gradlew jacocoTestReport
      - run:
          name: Upload coverage to code climate
          command: |
            export JACOCO_SOURCE_PATH=app/src/main/java
            ./cc-test-reporter format-coverage app/build/reports/jacocoTestReport/jacocoTestReport.xml -t jacoco
            ./cc-test-reporter upload-coverage
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - save_gradle_cache


  release_build:
    executor:
      name: android/android_machine
      tag: default
    steps:
      - checkout
      - export_google_services_key
      - decode_google_services_key
      - decode_keystore_key
      - export_keystore_key
      - restore_gradle_cache
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease --warning-mode all
      - run: ls -l app/
      - store_artifacts:
          path: app/prod/release/app-prod-release.apk
      - save_gradle_cache


workflows:
  build_test_deploy:
    jobs:
#      - quality_check
#      - unit_tests:
#          requires:
#            - quality_check
#      - android_tests:
#          requires:
#            - unit_tests
      - android_tests
      - jacoco_code_coverage:
          requires:
            - android_tests
      - release_build:
          requires:
            - jacoco_code_coverage

#  install_and_configure_cli:
#    jobs:
#      - use-gcp:
#          context: myContext
