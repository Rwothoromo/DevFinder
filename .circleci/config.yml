version: 2.1

orbs:
  android: circleci/android@3.1.0
#  gcp-cli: circleci/gcp-cli@3.3.1

jobs:
  build:
    docker:
      - image: cimg/android:2025.03
    working_directory: ~/repo
    environment:
      TERM: dumb
      # Customize the JVM maximum heap limit
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
    steps:
      - checkout
      - run: ./gradlew androidDependencies
      - run: ./gradlew lint test
      - android/create_avd:
          avd_name: myavd
          install: true
          system_image: system-images;android-31;default;x86_64
      - android/start_emulator:
          avd_name: myavd
          no_window: true
          restore_gradle_cache_prefix: v1a
      - android/run_tests
      - android/save_gradle_cache:
          cache_prefix: v1a
    executor:
      name: android/android_machine
      resource_class: large
      tag: default

  #  use-gcp:
  #    executor: gcp-cli/default
  #    steps:
  #      - gcp-cli/setup:
  #          version: 404.0.0

  export_gservices_key:
    executor:
      name: android/android_machine
      resource_class: large
      tag: default
    steps:
      - run:
          name: Export Google Services key environment variable
          command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV

  decode_gservices_key:
    executor:
      name: android/android_machine
      resource_class: large
      tag: default
    steps:
      - run: ls
      - run:
          name: Decode Google Services JSON key
          command: |
            sudo chmod 600 /root/.
            sudo mkdir -m 0755 -p app/src/mock/
            sudo mkdir -m 0755 -p app/src/prod/
            sudo touch -m 0755 app/google-services.json
            sudo touch -m 0755 app/src/mock/google-services.json
            sudo touch -m 0755 app/src/prod/google-services.json
            echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/google-services.json
            echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/src/mock/google-services.json
            echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/src/prod/google-services.json
      - run: ls -l

  ## Workspace
  workspace: ~/repo

  unit_test:
    executor:
      name: android/android_machine
      resource_class: large
      tag: default
    parallelism: 4
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run: ls
      - run: ./gradlew dependencies
      - restore_cache:
          keys:
            - v3-gradle-{{ checksum "build.gradle" }}
      - run: ls -l
      - android/run_tests:
          test_command: ./gradlew testMockDebugUnitTest |     circleci tests glob "app/src/**/**/*Test.kt" | circleci tests run --command="echo" --verbose --split-by=timings --timings-type=classname
      - persist_to_workspace:
          root: workspace
          paths:
            - app/build/intermediates
            - app/build/outputs/androidTest-results
            - app/build/outputs/apk
            - app/build/outputs/code-coverage
            - app/build/test-results
            - firebase
      - save_cache:
          paths:
            - ~/.gradle
          key: v3-gradle-{{ checksum "build.gradle" }}
      - run:
          name: Save test results
          command: |
            sudo mkdir -m 0755 -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  jacoco_code_coverage:
    executor:
      name: android/android_machine
      resource_class: large
      tag: default
    steps:
      - checkout
      - run:
          name: Decode the base64 encoded text back into the keystore.jks file
          command: |
            sudo mkdir -m 0755 -p ${HOME}/repo/keystores
            echo $ENCODED_KEYSTORE | base64 --decode >> ${HOME}/repo/keystores/keystore.jks
      - run:
          name: Set the KEYSTORE environment variable to itâ€™s location.
          command: echo 'export KEYSTORE=${HOME}/repo/keystores/keystore.jks' >> $BASH_ENV
      - restore_cache:
          keys:
            - v3-gradle-{{ checksum "build.gradle" }}
            - v3-dependencies-
      - run:
          name: List Android Dependencies
          command: |
            ./gradlew androidDependencies
      - run:
          name: Move Firebase coverage report
          command: |
            sudo mkdir -m 0755 -p app/build/outputs/code-coverage/connected/flavors/MOCK
            cp firebase/sailfish-26-en_US-portrait/artifacts/coverage.ec app/build/outputs/code-coverage/connected/flavors/MOCK/coverage.ec
      - run:
          name: Code Climate Test Setup
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Code Climate Pretest
          command: ./cc-test-reporter before-build
      - run:
          name: Generate JaCoCo report
          command: ./gradlew jacocoTestReport
      - run:
          name: Upload coverage to code climate
          command: |
            export JACOCO_SOURCE_PATH=app/src/main/java
            ./cc-test-reporter format-coverage app/build/reports/jacocoTestReport/jacocoTestReport.xml -t jacoco
            ./cc-test-reporter upload-coverage
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/

  release_build:
    executor:
      name: android/android_machine
      resource_class: large
      tag: default
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-gradle-{{ checksum "build.gradle" }}
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease
      - store_artifacts:
          path: app/build/outputs/apk/release/app-release-unsigned.apk

workflows:
  test_and_build:
    jobs:
      - export_gservices_key
      - decode_gservices_key:
          requires:
            - export_gservices_key
      - unit_test:
          requires:
            - decode_gservices_key
      - jacoco_code_coverage:
          requires:
            - unit_test
      - release_build:
          requires:
            - jacoco_code_coverage

#  install_and_configure_cli:
#    jobs:
#      - use-gcp:
#          context: myContext
