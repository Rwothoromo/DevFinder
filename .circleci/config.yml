version: 2.1

orbs:
  android: circleci/android@3.1.0
#  gcp-cli: circleci/gcp-cli@3.3.1

# Reusable commands / repeat tasks
commands:
  export_google_services_key:
    steps:
      - run:
          name: Export Google Services key environment variable
          command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV

  decode_google_services_key:
    steps:
      - run:
          name: Decode Google Services JSON key
          command: |
            sudo chmod 600 /root/.
            sudo mkdir -m 0755 -p app/src/mock/
            sudo mkdir -m 0755 -p app/src/prod/
            sudo touch -m 0755 app/google-services.json
            sudo touch -m 0755 app/src/mock/google-services.json
            sudo touch -m 0755 app/src/prod/google-services.json
            sudo chmod 777 app/google-services.json
            sudo chmod 777 app/src/mock/google-services.json
            sudo chmod 777 app/src/prod/google-services.json
            sudo echo $GOOGLE_SERVICES_JSON | base64 --decode > app/google-services.json
            sudo echo $GOOGLE_SERVICES_JSON | base64 --decode > app/src/mock/google-services.json
            sudo echo $GOOGLE_SERVICES_JSON | base64 --decode > app/src/prod/google-services.json
      - run: ls -l app/google-services.json

  export_keystore_key:
    steps:
      - run:
          name: Set the KEYSTORE environment variable to itâ€™s location.
          command: echo 'export KEYSTORE=~/project/keystores/keystore.jks' >> $BASH_ENV
      - run: ls -l ~/project/keystores/keystore.jks

  decode_keystore_key:
    steps:
      - run:
          name: Decode the base64 encoded text back into the keystore.jks file
          command: |
            sudo mkdir -m 0755 -p ~/project/keystores/
            sudo chmod 777 ~/project/keystores/
            echo $ENCODED_KEYSTORE | base64 --decode >> ~/project/keystores/keystore.jks
      - run: ls -l ~/project/keystores/keystore.jks

  save_gradle_cache:
    steps:
      - save_cache:
          paths:
            - ~/.gradle
          key: v3-gradle-{{ checksum "build.gradle" }}

  restore_gradle_cache:
    steps:
      - restore_cache:
          keys:
            - v3-gradle-{{ checksum "build.gradle" }}

jobs:
  build:
    docker:
      - image: cimg/android:2025.03
    working_directory: ~/
    environment:
      TERM: dumb
      # Customize the JVM maximum heap limit
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
    steps:
      - checkout
      - run: ./gradlew dependencies --warning-mode all
      - run: ./gradlew lint test
      - android/create_avd:
          avd_name: myavd
          install: true
          system_image: system-images;android-31;default;x86_64
      - android/start_emulator:
          avd_name: myavd
          no_window: true
          restore_gradle_cache_prefix: v1a
      - save_gradle_cache
    executor:
      name: android/android_machine
      resource_class: large
      tag: default

  #  use-gcp:
  #    executor: gcp-cli/default
  #    steps:
  #      - gcp-cli/setup:
  #          version: 404.0.0

  unit_tests:
    executor:
      name: android/android_machine
      tag: default
    parallelism: 4
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: ls -l
      - export_google_services_key
      - decode_google_services_key
      - run: ./gradlew dependencies --warning-mode all
      - restore_gradle_cache
      - android/run_tests:
          test_command: ./gradlew testMockDebugUnitTest | circleci tests glob "app/src/test/**/*Test.kt" | circleci tests run --command="echo" --verbose --split-by=timings --timings-type=classname
      - run: ls -l && pwd
      - persist_to_workspace:
          root: ~/project
          paths:
            - app/build/intermediates
            - app/build/outputs/androidTest-results
            - app/build/outputs/apk
            - app/build/outputs/code-coverage
            - app/build/test-results
            - app/build/reports
            - app/build/reports/androidTests
            - app/build/reports/tests
            - firebase
      - save_gradle_cache
      - run:
          name: Save test results
          command: |
            sudo mkdir -m 0755 -p ~/test-results/junit/
            sudo chmod 777 ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - run: ls -l ~/test-results/junit/
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  android_tests:
    executor:
      name: android/android_machine
      tag: default
    parallelism: 4
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: ls -l
      - export_google_services_key
      - decode_google_services_key
      - run:
          name: Export Google Cloud Service Account Key Environment Variable
          command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
      - run:
          name: Decode Google Cloud Credentials
          command: |
            sudo touch gcloud-service-key.json
            sudo chmod 777 gcloud-service-key.json
            echo $GCLOUD_SERVICE_KEY | base64 --decode >> gcloud-service-key.json
      - android/run_tests:
          test_command: ./gradlew connectedMockDebugAndroidTest | circleci tests glob "app/src/androidTest/**/*InstrumentationTest.kt" | circleci tests run --command="echo" --verbose --split-by=timings --timings-type=classname
          system_image: system-images;android-31;default;x86_64
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            gcloud auth activate-service-account narobi-java-developers@developers-216907.iam.gserviceaccount.com --key-file=gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: Test with Firebase Test Lab
          command: gcloud firebase test android run --type instrumentation --app app/build/outputs/apk/mock/debug/app-mock-debug.apk --test app/build/outputs/apk/androidTest/mock/debug/app-mock-debug-androidTest.apk --device model=sailfish,version=26,locale=en_US,orientation=portrait --environment-variables=coverage=true,coverageFile=/sdcard/coverage.ec --directories-to-pull=/sdcard --timeout 20m
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Download instrumented test results from Firebase Test Lab
          command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-inwsbb9xsp5f6-my4ixr2678xc0 | tail -1`*" firebase/ | true
      - persist_to_workspace:
          root: ~/project
          paths:
            - firebase
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  jacoco_code_coverage:
    executor:
      name: android/android_machine
      tag: default
    steps:
      - checkout
      - export_google_services_key
      - decode_google_services_key
      - decode_keystore_key
      - export_keystore_key
      - restore_gradle_cache
      - run: ./gradlew dependencies --warning-mode all
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run: ls -l ~/project/firebase/
      - run:
          name: Move Firebase coverage report
          command: |
            sudo mkdir -m 0755 -p app/build/outputs/code-coverage/connected/flavors/MOCK
            sudo chmod 777 app/build/outputs/code-coverage/connected/flavors/MOCK
            cp firebase/sailfish-26-en_US-portrait/artifacts/coverage.ec app/build/outputs/code-coverage/connected/flavors/MOCK/coverage.ec
      - run:
          name: Code Climate Test Setup
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Code Climate Pretest
          command: ./cc-test-reporter before-build
      - run:
          name: Generate JaCoCo report
          command: ./gradlew jacocoTestReport
      - run:
          name: Upload coverage to code climate
          command: |
            export JACOCO_SOURCE_PATH=app/src/main/java
            ./cc-test-reporter format-coverage app/build/reports/jacocoTestReport/jacocoTestReport.xml -t jacoco
            ./cc-test-reporter upload-coverage
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/

  release_build:
    executor:
      name: android/android_machine
      tag: default
    steps:
      - checkout
      - export_google_services_key
      - decode_google_services_key
      - decode_keystore_key
      - export_keystore_key
      - restore_gradle_cache
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease --warning-mode all
      - run: ls -l app/
      - store_artifacts:
          path: app/prod/release/app-prod-release.apk

workflows:
  test_and_build:
    jobs:
      - build
      - unit_tests:
          requires:
            - build
#      - android_tests: # No connected devices!
#          requires:
#            - unit_tests
#      - jacoco_code_coverage:
#          requires:
#            - android_tests
      - release_build:
          requires:
#            - jacoco_code_coverage
            - unit_tests

#  install_and_configure_cli:
#    jobs:
#      - use-gcp:
#          context: myContext
