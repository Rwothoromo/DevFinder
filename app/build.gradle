import com.android.ddmlib.DdmPreferences

buildscript {
    repositories {
    }

    dependencies {
    }
}

plugins {
    id("com.android.application")
    id("kotlin-android")
    id("kotlin-parcelize")
    id("jacoco")
    id("com.google.gms.google-services")
    alias(libs.plugins.compose.compiler)
}

repositories {
    mavenCentral()
}

apply from: rootProject.file('quality/quality.gradle')
apply from: rootProject.file('app/jacoco.gradle')

jacoco {
    toolVersion = "${rootProject.jacocoVersion}"
    reportsDirectory = file("${buildDir}/reports")
}

tasks.withType(Test).configureEach {
    testLogging {
        exceptionFormat = 'full'
        events("passed", "skipped", "failed")
        showStackTraces = true
    }
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    finalizedBy jacocoTestReport
}

android {
    namespace = "com.rwothoromo.devfinder"
    compileSdk = 35
    flavorDimensions "default"

    defaultConfig {
        applicationId = "com.rwothoromo.devfinder"
        minSdk = 21
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        DdmPreferences.setTimeOut(60000)
        // The app's state will be completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
        multiDexEnabled = true
    }

    signingConfigs {
        release {
            // keystorePropertiesFile - Useful on local machine
            def keystorePropertiesFile = rootProject.file("keystores/keystore.properties")
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

            // System.getenv - Useful on Circle CI
            storeFile = file(System.getenv("KEYSTORE") ?: "../keystores/keystore.jks") ?: file(keystoreProperties['storeFile'])
            storePassword = System.getenv("KEYSTORE_PASSWORD") ?: keystoreProperties['storePassword']
            keyAlias = System.getenv("KEY_ALIAS") ?: keystoreProperties['keyAlias']
            keyPassword = System.getenv("KEY_PASSWORD") ?: keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled = false
            signingConfig = signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            enableUnitTestCoverage = true
            enableAndroidTestCoverage = true
        }
        debug {
            enableUnitTestCoverage = true
            enableAndroidTestCoverage = true
        }
    }

    productFlavors {
        mock {
            dimension = "default"
        }
        prod {

        }
    }

    sourceSets {
        mock {
            java.srcDirs('src/mock/java')
        }
        prod {
            java.srcDirs('src/prod/java')
        }
    }

    testOptions {
        animationsDisabled = true
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                // Include all classes for coverage, unit tests are optimized for coverage reporting
            }
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        compose = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.4.2"
    }

    lint {
        abortOnError = false
    }

}

// For toolchain setup (Gradle 7.6+)
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support.constraint:constraint-layout:${rootProject.constraintLayout}"
    implementation "com.android.support:design:${rootProject.supportVersion}"
    implementation "com.squareup.retrofit2:retrofit:${rootProject.retrofitVersion}"
    implementation "com.google.code.gson:gson:${rootProject.gsonVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.retrofitVersion}"
    implementation "com.github.bumptech.glide:glide:${rootProject.glideVersion}"
    implementation "com.android.support.test.espresso.idling:idling-concurrent:${rootProject.espressoVersion}"
    implementation "com.squareup.okhttp3:mockwebserver:${rootProject.mockWebServer}"
    implementation "org.mockito:mockito-core:${rootProject.mockitoVersion}"
    implementation(platform("com.google.firebase:firebase-bom:$firebaseBom"))
    implementation("com.google.firebase:firebase-perf")
    implementation("com.google.firebase:firebase-analytics")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation("androidx.compose.runtime:runtime:$composeVersion")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:${rootProject.lifecycleViewmodel}")
    implementation("com.squareup.okhttp3:logging-interceptor:${rootProject.okhttp3LoggingInterceptor}")

    // Testing
    testImplementation "junit:junit:${rootProject.jUnit}"
    testImplementation "androidx.test:core:${rootProject.androidXTestVersion}"
    testImplementation "io.mockk:mockk:${rootProject.mockkVersion}" // Mocking lib for Kotlin
    testImplementation "org.mockito:mockito-core:${rootProject.mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${rootProject.mockitoInlineVersion}"
    testImplementation "org.mockito.kotlin:mockito-kotlin:${rootProject.mockitoKotlinVersion}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${rootProject.ktxCoroutinesTest}"
    testImplementation("com.squareup.okhttp3:mockwebserver:${rootProject.okhttp3Mockwebserver}")

    androidTestImplementation "androidx.test:core:${rootProject.androidXTestVersion}"
    androidTestImplementation "androidx.test:core-ktx:${rootProject.androidXTestVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.espressoVersion}"
    androidTestImplementation("androidx.test.ext:junit:${rootProject.jUnitExt}") { // JUnit Ext APIs
        // AndroidX Test Orchestrator dependency
        exclude group: 'androidx.test', module: 'orchestrator'
    }
    androidTestImplementation "androidx.test.ext:junit-ktx:${rootProject.jUnitExt}"
    androidTestImplementation "androidx.test.ext:truth:${rootProject.truthVersion}"// Truth Ext APIs
    androidTestImplementation "androidx.test:runner:${rootProject.testRunner}"
    androidTestImplementation "androidx.test:rules:${rootProject.testRules}"

    androidTestImplementation "com.android.support.test:runner:${rootProject.testRunner}"
    androidTestImplementation "com.android.support.test:rules:${rootProject.testRunner}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${rootProject.espressoVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:${rootProject.espressoVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:${rootProject.espressoVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-idling-resource:${rootProject.espressoVersion}"
}
