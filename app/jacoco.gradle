def coverageSourceDirs = [
        'src/main/java',
        'src/debug/java',
        'src/mock/java',
        'src/prod/java'
]

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn['clean', 'test']
    description = 'Generate JaCoCo coverage report'
    group = 'Reporting'

    reports {
        xml.required = false
        html.required = true
        html.outputLocation = project.buildDir.dir('jacocoHtml')
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*'
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def javaMainSrc = "${project.projectDir}/src/main/java"
    def kotlinMainSrc = "${project.projectDir}/src/main/kotlin"
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/prodDebug", excludes: fileFilter)

    classDirectories.setFrom(files([debugTree], [kotlinDebugTree]))
    sourceDirectories.setFrom(files([coverageSourceDirs], [kotlinMainSrc]))
    // Specify execution data files that JaCoCo will use to generate coverage report
    executionData.setFrom(
            fileTree(
                    dir: "$buildDir",
                    includes: ['**/*.exec', '**/*.ec',
                               "jacoco/testDebugUnitTest.exec",
                               "outputs/code-coverage/connected/*coverage.ec"
                    ]))
}

tasks.register('unifiedCoverageReport') {
    dependsOn['clean', 'jacocoTestReport', 'createProdDebugCoverageReport']
    description = 'Generates coverage report which includes both local unit tests and instrumentation tests'
    group = 'Reporting'
}